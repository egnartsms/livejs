Tracked objects are persisted in disk files.  The opposite is called "untracked": they are
volatile, runtime-only objects not supposed to be persisted.

Inspected objects are objects that are inspected on the FE side via REPL or code browser.
For REPL it makes no difference what object to inspect, whether tracked or untracked. For
the code browser, tracked objects are laid out in a normal way, and untracked objects are
supposed to get inspected (same as in REPL).  Presently we just display "new Object()" to
indicate an untracked value.


Serialization protocol for tracked objects, for persisting and code browsing:

{
    type: 'function',
    value: func.toString()
}

{
    type: 'leaf',
    // a string that is to be literally inserted in a REPL or module browser view.
    // So this may be "null", "true", "undefined" or "\"JS string\"".
    value: "/abc/"
}

{
    type: 'object',
    value: {
        prop-0: val-0,
        ...
    }
}

{
    type: 'array',
    value: [
       val-0,
       ...
    ]
}



Serialization protocol for object inspection:

{
    type: 'function',
    id: 234,
    value: func.toString()
}

{
    type: 'leaf',
    // A string that is to be literally inserted. So this may be "null", "true",
    // "undefined" or "\"JS string\"".
    value: "/abc/"
}

// For getters as lazily evaluated placeholders for real values of properties
{
    type: 'unrevealed',
    parentId: 234,
    prop: "size"
}

{
    type: 'object',
    id: 234,
    // only if serialization is deep
    value: {
       prop-0: val-0,
       ...
    }
}

{
    type: 'array',
    id: 234,
    // only if serialization is deep
    value: [
       val-0,
       ...
    ]
}
